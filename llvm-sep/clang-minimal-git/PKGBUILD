#Maintainer: archdevlab <https://github.com/archdevlab>
#Credits: Evangelos Foutras <evangelos@foutrelis.com>
#Credits: Jan "heftig" Steffens <jan.steffens@gmail.com>
#Credits: Lone_Wolf <lone_wolf@klaas-de-kat.nl>

pkgbase=clang-minimal-git
pkgname=(clang-minimal-git clang-libs-minimal-git)
url='https://clang.llvm.org/'
pkgver=19.0.0.r503537.g6b707a8cc143
pkgrel=1
_pkgver=19.0.0
commit=6b707a8cc143f094b02393f4faf89025c64520bb
arch=(x86_64)
license=('custom:Apache 2.0 with LLVM Exception')
makedepends=(llvm-minimal-git cmake ninja python-sphinx python-recommonmark make git)
options=(staticlibs !lto) # https://github.com/llvm/llvm-project/issues/57740
source=(git+https://github.com/llvm/llvm-project.git#commit="${commit}"
        enable-fstack-protector-strong-by-default.patch)

# Utilizing LLVM_DISTRIBUTION_COMPONENTS to avoid
# installing static libraries; inspired by Gentoo
_get_distribution_components(){
local target
local include

make help | grep -Po 'install-\K.*(?=-stripped)' | while read -r target; do
    case $target in
        clang-libraries|distribution )
            include=0
            ;;
        clang-tidy-headers )
            include=0
            ;;
        clang|clangd|clang-* )
            include=1
            ;;
        clang*|findAllSymbols )
            include=0
            ;;
        # Anything not covered above is included
        * )
            include=1
    esac
    if [ $include -eq 1 ]; then
        echo $target
    fi
done
}

pkgver(){
  cd "${srcdir}"/llvm-project/

  # This will almost match the output of `llvm-config --version` when the
  # LLVM_APPEND_VC_REV cmake flag is turned on. The only difference is
  # dash being replaced with underscore because of Pacman requirements.
  local _pkgver=$(awk -F 'MAJOR |MINOR |PATCH |)' \
  'BEGIN { ORS="." ; i=0 } \
  /set\(LLVM_VERSION_/ { print $2 ; i++ ; if (i==2) ORS="" } \
  END { print "\n" }' \
  cmake/Modules/LLVMVersion.cmake).r$(git rev-list --count HEAD).g$(git rev-parse --short HEAD)
  echo "${_pkgver}"
}

prepare(){
  mv "${srcdir}"/llvm-project/clang-tools-extra "${srcdir}"/llvm-project/clang/tools/extra

  # Attempt to convert script to Python 3
  2to3 -wn --no-diffs \
    "${srcdir}"/llvm-project/clang/tools/extra/clang-include-fixer/find-all-symbols/tool/run-find-all-symbols.py

  pushd "${srcdir}"/llvm-project/clang/
  patch -Np2 -i "${srcdir}"/enable-fstack-protector-strong-by-default.patch
  popd
}

build(){
# https://aur.archlinux.org/cgit/aur.git/commit/?h=llvm-minimal-git&id=ae64860f523a57e2c6d0a9e65ed8af8c82d1ca73
# build aborts with FORTIFY_SOURCE=3 , see https://github.com/llvm/llvm-project/issues/85509
export CFLAGS="${CFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=2}"
export CXXFLAGS="${CXXFLAGS/_FORTIFY_SOURCE=3/_FORTIFY_SOURCE=2}"

  rm -rf "${srcdir}"/llvm-project/.git/

  local cmake_args=(
      -G "Unix Makefiles"
      -D CMAKE_BUILD_TYPE=Release
      -D CMAKE_INSTALL_PREFIX=/usr
      -D LLVM_BINUTILS_INCDIR=/usr/include
      -D CMAKE_SKIP_RPATH=ON
      -D CLANG_DEFAULT_PIE_ON_LINUX=ON
      -D CLANG_LINK_CLANG_DYLIB=ON
      -D ENABLE_LINKER_BUILD_ID=ON
      -D LLVM_BUILD_DOCS=OFF
      -D LLVM_BUILD_TESTS=OFF
      -D LLVM_ENABLE_RTTI=ON
      -D LLVM_ENABLE_SPHINX=OFF
      -D LLVM_EXTERNAL_LIT=/usr/bin/lit
      -D LLVM_INCLUDE_DOCS=OFF
      -D LLVM_LINK_LLVM_DYLIB=ON
      -D LLVM_MAIN_SRC_DIR="${srcdir}"/llvm-project/llvm
      -D SPHINX_WARNINGS_AS_ERRORS=OFF
      -D LLVM_INCLUDE_TESTS=OFF
      -D LLVM_CONFIG=/usr/bin/llvm-config
    )

  cmake -B "${srcdir}"/build -S "${srcdir}"/llvm-project/clang "${cmake_args[@]}" -Wno-dev

  pushd "${srcdir}"/build
  local distribution_components=$(_get_distribution_components | paste -sd\;)
  popd
  test -n "$distribution_components"
  cmake_args+=(-D LLVM_DISTRIBUTION_COMPONENTS="$distribution_components")

  cmake -B "${srcdir}"/build -S "${srcdir}"/llvm-project/clang "${cmake_args[@]}" -Wno-dev
  make -j$(nproc) -C "${srcdir}"/build
}

_python_optimize(){
  python -m compileall "$@"
  python -O -m compileall "$@"
  python -OO -m compileall "$@"
}

package_clang-minimal-git(){
  pkgdesc='C language family frontend for LLVM (git version)'
  depends=(llvm-libs-minimal-git clang-libs-minimal-git gcc compiler-rt-minimal-git)
  optdepends=('openmp: OpenMP support in clang with -fopenmp'
              'python: for scan-view, scan-build, git-clang-format, clang-rename and python bindings'
              'llvm-minimal-git: referenced by some clang headers')
  provides=(clang clang-analyzer clang-tools-extra)
  provides+=(clang-minimal-git clang-git)
  conflicts=(clang)
  replaces=(clang-analyzer clang-tools-extra)

  make -j$(nproc) -C "${srcdir}"/build DESTDIR="${pkgdir}" install-distribution

  # The clang runtime libraries go into clang-libs-minimal-git
  # https://bugs.archlinux.org/task/72588?project=1&string=clang
  mkdir -p "${srcdir}"/clang-libs/usr/lib
  mv -f "${pkgdir}"/usr/lib/libclang{,-cpp}.so* "${srcdir}"/clang-libs/usr/lib/

  # I think it's usefull to have this CLANG Python bindings since we ship complete CLANG
  # If I proove that it's not usefull we will remove the below
  # Move scanbuild-py into site-packages and install Python bindings
  _py=$([[ "$(python -V)" =~ Python[[:space:]]*([0-9]+.[0-9]+) ]] && echo ${BASH_REMATCH[1]})
  local site_packages="/usr/lib/python$_py/site-packages"
  install -d "${pkgdir}"/"${site_packages}"
  mv "${pkgdir}"/usr/lib/{libear,libscanbuild} "${pkgdir}"/"${site_packages}"/
  cp -a "${srcdir}"/llvm-project/clang/bindings/python/clang "${pkgdir}"/"${site_packages}"/

  # Move analyzer scripts out of /usr/libexec
  mv "${pkgdir}"/usr/libexec/* "${pkgdir}"/usr/lib/clang/
  rmdir "${pkgdir}"/usr/libexec
  sed -i 's|libexec|lib/clang|' \
    "${pkgdir}"/usr/bin/scan-build \
    "${pkgdir}"/"${site_packages}"/libscanbuild/analyze.py

  # Compile Python scripts
  _python_optimize "${pkgdir}"/usr/share "${pkgdir}"/"${site_packages}"

  # (taken from llvm-git aur)
  # optimize other python files except 2 problem cases
  _python_optimize "${pkgdir}"/usr/share -x 'clang-include-fixer|run-find-all-symbols'

  # install license
  install -dm755 "${pkgdir}"/usr/share/licenses/"${pkgname}"/{clang,clang-tools-extra}
  install -m644 "${srcdir}"/llvm-project/clang/LICENSE.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/clang/LICENSE
  install -m644 "${srcdir}"/llvm-project/clang/CodeOwners.rst "${pkgdir}"/usr/share/licenses/"${pkgname}"/clang/CodeOwners.rst
  install -m644 "${srcdir}"/llvm-project/clang/tools/extra/LICENSE.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/clang-tools-extra/LICENSE
  install -m644 "${srcdir}"/llvm-project/clang/tools/extra/CODE_OWNERS.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/clang-tools-extra/CODE_OWNERS
}

# https://bugs.archlinux.org/task/72588?project=1&string=clang
package_clang-libs-minimal-git(){
  pkgdesc='Clang runtime libraries (git version)'
  depends=(llvm-libs-minimal-git)
  # the functionality offered by this package is part of the clang repo pacakge.
  # TODO: when/if this functionality is split off from repo clang, verify if changes are needed to this package
  provides=(clang-libs)
  provides+=(clang-libs-minimal-git clang-libs-git)
  conflicts=(clang-libs)

  cp --preserve --recursive "${srcdir}"/clang-libs/* "${pkgdir}"/

  # install license
  install -dm755 "${pkgdir}"/usr/share/licenses/"${pkgname}"
  install -m644 "${srcdir}"/llvm-project/clang/LICENSE.TXT "${pkgdir}"/usr/share/licenses/"${pkgname}"/LICENSE
  install -m644 "${srcdir}"/llvm-project/clang/CodeOwners.rst "${pkgdir}"/usr/share/licenses/"${pkgname}"/CodeOwners.rst
}

sha256sums=(SKIP
            ef319e65f927718e1d3b1a23c480d686b1d292e2a0bf27229540964f9734117a)

# vim:set ts=8 sts=2 sw=2 et:
